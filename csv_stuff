# Versie 2.0 - Functionele aanpassingen: ontdubbelen en selectie geschiedt nu nu binnen deze taak en niet meer in MS Access) - Technische aanpassingen: Meer begrip mbt objecten en Powershell in het algemeen wat in nettere en slimmere code resulteert. Tevens is het opschonen van de csv opgenomen.
# Voor vragen rondom dit script mail naar helpdesk@legrogroup.com 

# Files verplaatsen voor het bewerken  
Get-ChildItem -Path \\leg-app03\EXPORT_PenG\ -Filter "verw*.csv" | Move-Item -Destination \\leg-app03\EXPORT_PenG\TKv2FirstImport\ -Force 

# CSV files toevoegen. Tevens selectie op order LP nummer (alleen Die orders die beginnen met een S en waarvan het order nummer niet leeg is).
Get-ChildItem -path \\leg-app03\EXPORT_PenG\TKv2FirstImport -Filter verwer*.csv | select-object -ExpandProperty fullname | Import-Csv -Delimiter ";" | where-Object {$_."order lp" -like "S*" -and $_."order lp" -notlike ""} |  Export-Csv \\leg-app03\EXPORT_PenG\TKv2_FirstImport.csv -Delimiter ";" -NoTypeInformation -Append

# De csv ontdubbelen, na de eerste inlezing in TKv2_FirstImport.csv waarbij regels worden toegevoegd, wordt de output hiervan in een file (TKv2Uniek.csv) gestopt die wordt overschreven. 
Import-Csv \\leg-app03\EXPORT_PenG\TKv2_FirstImport.csv -Delimiter ";" | Group-Object -Property "Order LP" | ForEach-Object {$_.group | Sort-Object -Property "datum Export", "Tijd Export" | Select-Object -last 1} | export-csv TKv2Uniek.csv -Delimiter ";" -NoTypeInformation 


# Speciale karakters als wildcards zijn noemenswaardig moeilijk te vangen als reguliere karakters. Het is nodig om de wildcard in literal quotes te zetten en in een string te stoppen om deze correct te kunnen vermelden als regulier karakter in de volgende bewerking.
$asterix = '******' 
# Hierna wordt het object cvs wat binnen Powershell eigenschappen heeft als kolommen en rijen (waar we op selecteren) losgelaten en beschouwen we het als een tekst file waar we tekstuele bewerkingen op uitvoeren. Dit betreft vooral punctuatie waar de Access import niet mee kan omgaan.
Get-Content \\leg-app03\EXPORT_PenG\TKv2Uniek.csv | Foreach-Object {$_ -replace '"', '' -replace '00-00-0000', '' -replace '.0;ENM',  ',0;ENM' -replace '.1;ENM', ',1;ENM' -replace '.2;ENM', ',2;ENM' -replace '.3;ENM', ',3;ENM' -replace '.4;ENM', ',4;ENM' -replace '.5;ENM', ',5;ENM' -replace '.6;ENM', ',6;ENM' -replace '.7;ENM', ',7;ENM' -replace '.8;ENM', ',8;ENM' -replace '.9;ENM', ',9;ENM' -replace '$asterix', ''} | out-file -FilePath \\leg-app03\EXPORT_PenG\TKv2_Bewerkt.csv

# [Commentaar voor mezelf: In een volgende versie de .cijfer;ENM naar komma wat verfijnen als zijnde variabel cijfer of wildcard cijfer.]


# Files verplaatsen na alle bewerkingen. De files verplaatsen voor en achteraf de bewerkingen doen we om absoluut zeker te zijn dat er geen files worden verplaats die nog niet zijn ingelezen. 
Get-ChildItem -Path \\leg-app03\EXPORT_PenG\TKv2FirstImport\ -Filter verwer*.csv | Move-Item -Destination \\leg-app03\EXPORT_PenG\TKv2Imported\ -Force 

# nieuwe functionaliteit waarbij ik opschoon de file aan de hand van de hudiige datum opschoon waarbij minimaal de import van de laatste 2 werkdagen blijven bewaard geen rekening houdend met vakantiedagen. 


if ((Get-Date).DayOfWeek -eq "Monday" -or (Get-Date).DayOfWeek -eq "Tuesday" -and (Get-Date).Hour -eq "0") 
{
Import-Csv \\leg-app03\EXPORT_PenG\TKv2_FirstImport.csv -Delimiter ";" | where-object {(Get-Date $_."datum export") -ge ((Get-Date).adddays(-3))} | Export-Csv \\leg-app03\EXPORT_PenG\TKv2_opschoontest.csv -Delimiter ";"
}
elseif ((Get-Date).Hour -eq "0") 
{
Import-Csv \\leg-app03\EXPORT_PenG\TKv2_FirstImport.csv -Delimiter ";" | where-object {(Get-Date $_."datum export") -ge ((Get-Date).adddays(-2))} | Export-Csv \\leg-app03\EXPORT_PenG\TKv2_opschoontest.csv -Delimiter ";"
}
else 
{
# Alleen aanzetten voor testen
#Import-Csv \\leg-app03\EXPORT_PenG\TKv2_FirstImport.csv -Delimiter ";" | where-object {(Get-Date $_."datum export") -ge ((Get-Date).adddays(-2))} | Export-Csv \\leg-app03\EXPORT_PenG\TKv2_opschoontest.csv -Delimiter ";"
}
